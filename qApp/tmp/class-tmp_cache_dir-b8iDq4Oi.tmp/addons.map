{"version":3,"sources":["ember-bootstrap-components.js","ember-bootstrap-components/components/bs-alert.js","ember-bootstrap-components/components/bs-button-group.js","ember-bootstrap-components/components/bs-button.js","ember-bootstrap-components/components/bs-component.js","ember-bootstrap-components/components/bs-dropdown-button.js","ember-bootstrap-components/components/bs-dropdown-menu.js","ember-bootstrap-components/components/bs-dropdown-toggle.js","ember-bootstrap-components/components/bs-dropdown.js","ember-bootstrap-components/components/bs-form-element.js","ember-bootstrap-components/components/bs-form-group.js","ember-bootstrap-components/components/bs-form.js","ember-bootstrap-components/components/bs-input.js","ember-bootstrap-components/components/bs-modal.js","ember-bootstrap-components/components/bs-select.js","ember-bootstrap-components/components/bs-textarea.js","ember-bootstrap-components/config.js","ember-bootstrap-components/mixins/dropdown-toggle.js","ember-bootstrap-components/mixins/i18n-support.js","ember-bootstrap-components/mixins/size-class.js","ember-bootstrap-components/mixins/type-class.js","ember-bootstrap-components/services/bootstrap-modal-manager.js"],"sourcesContent":["define(\"ember-bootstrap-components\", [\"ember-bootstrap-components/index\",\"exports\"], function(__index__, __exports__) {\n  \"use strict\";\n  Object.keys(__index__).forEach(function(key){\n    __exports__[key] = __index__[key];\n  });\n});\n","define('ember-bootstrap-components/components/bs-alert', ['exports', 'ember', 'ember-bootstrap-components/mixins/type-class'], function (exports, Ember, TypeClass) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(TypeClass['default'], {\r\n        classNameBindings: ['alert','fade','in'],\r\n\r\n        /**\r\n         * A dismissible alert will have a close button in the upper right corner, that the user can click to dismiss\r\n         * the alert.\r\n         *\r\n         * @property dismissible\r\n         * @type boolean\r\n         * @default true\r\n         * @public\r\n         */\r\n        dismissible: true,\r\n\r\n        /**\r\n         * If true the alert is completely hidden. Will be set when the fade animation has finished.\r\n         *\r\n         * @property dismissed\r\n         * @type boolean\r\n         * @default false\r\n         * @readonly\r\n         * @protected\r\n         */\r\n        dismissed: false,\r\n\r\n        /**\r\n         * This property indicates if the alert is visible. If false it might still be in the DOM until the fade animation\r\n         * has completed. Can be set to change the visibility of the alert box.\r\n         *\r\n         * @property visible\r\n         * @type boolean\r\n         * @default true\r\n         * @public\r\n         */\r\n        visible: true,\r\n\r\n        /**\r\n         * Set to false to disable the fade out animation when hiding the alert.\r\n         *\r\n         * @property fade\r\n         * @type boolean\r\n         * @default true\r\n         * @public\r\n         */\r\n        fade: true,\r\n\r\n        /**\r\n         * Computed property to set the alert class to the component div. Will be false when dismissed to have the component\r\n         * div (which cannot be removed form DOM by the component itself) without any markup.\r\n         *\r\n         * @property alert\r\n         * @type boolean\r\n         * @private\r\n         */\r\n        alert: Ember['default'].computed.not('dismissed'),\r\n        in: Ember['default'].computed.and('visible','fade'),\r\n\r\n        /**\r\n         * @property classTypePrefix\r\n         * @type String\r\n         * @default 'alert'\r\n         * @protected\r\n         */\r\n        classTypePrefix: 'alert',\r\n\r\n        /**\r\n         * The duration of the fade out animation\r\n         *\r\n         * @property fadeDuration\r\n         * @type integer\r\n         * @default 150\r\n         * @public\r\n         */\r\n        fadeDuration: 150,\r\n\r\n        actions: {\r\n            dismiss: function() {\r\n                this.hide();\r\n            }\r\n        },\r\n\r\n        _onVisibleChange: Ember['default'].observer('visible', function() {\r\n            if (this.get('visible')) {\r\n                this.show();\r\n            }\r\n            else {\r\n                this.hide();\r\n            }\r\n        }),\r\n\r\n        /**\r\n         * Call to make the alert visible again after it has been hidden\r\n         *\r\n         * @method show\r\n         * @public\r\n         */\r\n        show: function() {\r\n            this.setProperties({\r\n                dismissed: false,\r\n                visible: true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Call to hide the alert. If the `fade` property is true, this will fade out the alert before being finally\r\n         * dismissed.\r\n         *\r\n         * @method hide\r\n         * @public\r\n         */\r\n        hide: function() {\r\n            if (this.get('fade')) {\r\n                this.set('visible', false);\r\n                Ember['default'].run.later(this,function() {\r\n                    if (!this.get('isDestroyed')) {\r\n                        this.set('dismissed', true);\r\n                    }\r\n                },this.get('fadeDuration'));\r\n            }\r\n            else {\r\n                this.setProperties({\r\n                    dismissed: true,\r\n                    visible: false\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n    });\n\n});","define('ember-bootstrap-components/components/bs-button-group', ['exports', 'ember', 'ember-bootstrap-components/components/bs-button', 'ember-bootstrap-components/mixins/size-class'], function (exports, Ember, Button, SizeClass) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(SizeClass['default'], {\r\n\r\n        /**\r\n         * @type string\r\n         * @property ariaRole\r\n         * @default 'group'\r\n         * @protected\r\n         */\r\n        ariaRole: 'group',\r\n\r\n        /**\r\n         * @property classNames\r\n         * @type array\r\n         * @default ['btn-group']\r\n         * @protected\r\n         */\r\n        classNames: ['btn-group'],\r\n\r\n        /**\r\n         * @property classNameBindings\r\n         * @type array\r\n         * @protected\r\n         */\r\n        classNameBindings: ['vertical:btn-group-vertical','justified:btn-group-justified'],\r\n\r\n        /**\r\n         * @property classTypePrefix\r\n         * @type String\r\n         * @default 'btn-group'\r\n         * @protected\r\n         */\r\n        classTypePrefix: 'btn-group',\r\n\r\n        /**\r\n         * Set to true for a vertically stacked button group, see http://getbootstrap.com/components/#btn-groups-vertical\r\n         *\r\n         * @property vertical\r\n         * @type boolean\r\n         * @default false\r\n         * @public\r\n         */\r\n        vertical: false,\r\n\r\n        /**\r\n         * Set to true for the buttons to stretch at equal sizes to span the entire width of its parent.\r\n         *\r\n         * *Important*: You have to wrap every button component in a `div class=\"btn-group\">`:\r\n         *\r\n         * ```handlebars\r\n         * <div class=\"btn-group\" role=\"group\">\r\n         * {{#bs-button}}My Button{{/bs-button}}\r\n         * </div>\r\n         * ```\r\n         *\r\n         * See http://getbootstrap.com/components/#btn-groups-justified\r\n         *\r\n         * @property justified\r\n         * @type boolean\r\n         * @default false\r\n         * @public\r\n         */\r\n        justified: false,\r\n\r\n        /**\r\n         * The type of the button group specifies how child buttons behave and how the `value` property will be computed:\r\n         *\r\n         * ### null\r\n         * If `type` is not set (null), the button group will add no functionality besides Bootstrap styling\r\n         *\r\n         * ### radio\r\n         * if `type` is set to \"radio\", the buttons will behave like radio buttons:\r\n         * * the buttons will toggle (`toggle` property of the child buttons will be set to true)\r\n         * * only one button may be active\r\n         * * the `value` property of the button group will reflect the `value` property of the active button\r\n         *\r\n         * ### checkbox\r\n         * if `type` is set to \"checkbox\", the buttons will behave like checkboxes:\r\n         * * the buttons will toggle (`toggle` property of the child buttons will be set to true)\r\n         * * any number of buttons may be active\r\n         * * the `value` property of the button group will be an array containing the `value` properties of all active buttons\r\n         *\r\n         * @property type\r\n         * @type string\r\n         * @default null\r\n         * @public\r\n         */\r\n        type: null,\r\n\r\n\r\n        /**\r\n         * The value of the button group, computed by its child buttons.\r\n         * See the {{#crossLink \"Button-Group/type:attribute\"}}`type` property{{/crossLink}} for how the value property is constructed.\r\n         *\r\n         * When you set the value, the corresponding buttons will be activated:\r\n         * * use a single value for a radio button group to activate the button with the same value\r\n         * * use an array of values for a checkbox button group to activate all the buttons with values contained in the array\r\n         *\r\n         * @property value\r\n         * @type array|any\r\n         * @public\r\n         */\r\n        value: undefined,\r\n\r\n        _syncValueToActiveButtons: Ember['default'].observer('value','childButtons.@each.value',function(){\r\n            if (!this._inDOM) {\r\n                return;\r\n            }\r\n            var value = this.get('value'),\r\n                values = Ember['default'].A(!Ember['default'].isArray(value) ? [value] : value);\r\n            this.get('childButtons')\r\n                .forEach(function(button) {\r\n                    button.set('active', values.contains(button.get('value')));\r\n                });\r\n        }),\r\n\r\n        /**\r\n         * Array of all child buttons (instances of Bootstrap.Button)\r\n         * @property childButtons\r\n         * @type array\r\n         * @protected\r\n         */\r\n        childButtons: Ember['default'].computed.filter('childViews', function(view) {\r\n            return view instanceof Button['default'];\r\n        }),\r\n\r\n\r\n        /**\r\n         * Child buttons that are active (pressed)\r\n         * @property activeChildren\r\n         * @type array\r\n         * @protected\r\n         */\r\n        activeChildren: Ember['default'].computed.filterBy('childButtons', 'active', true),\r\n\r\n\r\n        lastActiveChildren: Ember['default'].A(),\r\n        newActiveChildren: Ember['default'].computed.setDiff('activeChildren','lastActiveChildren'),\r\n        _observeButtons: Ember['default'].observer('activeChildren.[]','type', function() {\r\n            var type = this.get('type');\r\n            if (!this._inDOM || (type !== 'radio' && type !== 'checkbox')) {\r\n                return;\r\n            }\r\n\r\n            //var lastActiveChild = this.get('lastActiveChildren.firstObject')\r\n\r\n            Ember['default'].run.scheduleOnce('actions',this, function(){\r\n                // the button that just became active\r\n                var newActive,\r\n                    lastActive,\r\n                    value;\r\n\r\n                switch (type) {\r\n                    case 'radio':\r\n                        newActive = this.get('newActiveChildren').objectAt(0);\r\n                        if (newActive) {\r\n                            value = newActive.get('value');\r\n                        }\r\n                        else {\r\n                            lastActive = this.get('lastActiveChildren.firstObject');\r\n                            if (lastActive) {\r\n                                lastActive.set('active', true);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 'checkbox':\r\n                        value = this.get('activeChildren').mapBy('value');\r\n                        break;\r\n                }\r\n                if (value) {\r\n                    this.set('value', value);\r\n                }\r\n                // remember activeChildren, used as a replacement for a before observer as they will be deprecated in the future...\r\n                this.set('lastActiveChildren', Ember['default'].A(this.get('activeChildren').slice()));\r\n            });\r\n        }),\r\n\r\n        _observeType: Ember['default'].observer('type','childButtons.[]', function() {\r\n            if (this.get('type') === 'radio' || this.get('type') === 'checkbox') {\r\n                // set all child buttons to toggle\r\n                this.get('childButtons').forEach(function(button) {\r\n                    button.set('toggle', true);\r\n                });\r\n            }\r\n        }),\r\n\r\n        init: function() {\r\n            this._super();\r\n            this.get('activeChildren');\r\n        },\r\n\r\n        _inDOM: false,\r\n\r\n        didInsertElement: function() {\r\n            this._inDOM = true;\r\n        }\r\n\r\n\r\n    });\n\n});","define('ember-bootstrap-components/components/bs-button', ['exports', 'ember', 'ember-bootstrap-components/mixins/type-class', 'ember-bootstrap-components/mixins/size-class', 'ember-bootstrap-components/mixins/i18n-support'], function (exports, Ember, TypeClass, SizeClass, I18nSupport) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(Ember['default']._ProxyMixin, TypeClass['default'], SizeClass['default'], I18nSupport['default'], {\r\n      tagName: 'button',\r\n      classNames: ['btn'],\r\n      classNameBindings: ['active', 'block:btn-block'],\r\n\r\n      /**\r\n       * @property classTypePrefix\r\n       * @type String\r\n       * @default 'btn'\r\n       * @protected\r\n       */\r\n      classTypePrefix: 'btn',\r\n\r\n      attributeBindings: ['id', 'disabled', 'buttonType:type', 'dismiss:data-dismiss', 'contentDismiss:data-dismiss', '_type:type', 'style'],\r\n\r\n      getPojoProperties: function(pojo) {\r\n        if (Ember['default'].isEmpty(pojo)) {\r\n          return [];\r\n        }\r\n        return Object.keys(pojo);\r\n      },\r\n      getProxiedProperties: function(proxyObject) {\r\n        var contentProperties, objectProperties, prototypeProperties;\r\n        contentProperties = this.getObjectProperties(proxyObject.get('content'));\r\n        prototypeProperties = Object.keys(proxyObject.constructor.prototype);\r\n        objectProperties = this.getPojoProperties(proxyObject);\r\n        return contentProperties.concat(prototypeProperties).concat(objectProperties).uniq();\r\n      },\r\n      getEmberObjectProperties: function(emberObject) {\r\n        var objectProperties, prototypeProperties;\r\n        prototypeProperties = Object.keys(emberObject.constructor.prototype);\r\n        objectProperties = this.getPojoProperties(emberObject);\r\n        return prototypeProperties.concat(objectProperties).uniq();\r\n      },\r\n      getEmberDataProperties: function(emberDataObject) {\r\n        var attributes, keys;\r\n        attributes = Ember['default'].get(emberDataObject.constructor, 'attributes');\r\n        keys = Ember['default'].get(attributes, 'keys.list');\r\n        return Ember['default'].getProperties(emberDataObject, keys);\r\n      },\r\n      getObjectProperties: function(object) {\r\n        if (object instanceof DS.Model) {\r\n          return this.getEmberDataProperties(object);\r\n        } else if (object instanceof Ember['default'].ObjectProxy || Ember['default']._ProxyMixin.detect(object)) {\r\n          return this.getProxiedProperties(object);\r\n        } else if (object instanceof Ember['default'].Object) {\r\n          return this.getEmberObjectProperties(object);\r\n        } else {\r\n          return this.getPojoProperties(object);\r\n        }\r\n      },\r\n\r\n      init: function() {\r\n        var me, properties;\r\n        this._super();\r\n        me = this;\r\n        if ((this.get('content') != null) && Ember['default'].typeOf(this.get('content')) === 'instance') {\r\n          properties = this.getObjectProperties(this.get('content'));\r\n          if (Ember['default'].isPresent(this.get('content.action'))) {\r\n            this.set('action', this.get('content.action'));\r\n          }\r\n          return this.getProperties(properties);\r\n        } else {\r\n          if (this.get('defaultText') == null) {\r\n            this.initParameters();\r\n            return this.set('defaultText', this.get('content'));\r\n          }\r\n        }\r\n      },\r\n\r\n    initParameters: function() {\r\n      this.setProperties({\r\n        defaultText: null,\r\n        disabled: false,\r\n        buttonType: 'button',\r\n        active: false,\r\n        block: false,\r\n        toggle: false,\r\n        iconInactive: null,\r\n        value: null,\r\n        textState: 'default',\r\n        reset: null\r\n      })\r\n    },\r\n\r\n      /**\r\n       * Default label of the button. Not need if used as a block component\r\n       *\r\n       * @property defaultText\r\n       * @type string\r\n       * @public\r\n       */\r\n      //defaultText: null,\r\n\r\n      /**\r\n       * Property to disable the button\r\n       *\r\n       * @property disabled\r\n       * @type boolaen\r\n       * @default false\r\n       * @public\r\n       */\r\n      //disabled: false,\r\n\r\n      /**\r\n       * Set the type of the button, either 'button' or 'submit'\r\n       *\r\n       * @property buttonType\r\n       * @type String\r\n       * @default 'button'\r\n       * @public\r\n       */\r\n      //buttonType: 'button',\r\n\r\n      /**\r\n       * Set the 'active' class to apply active/pressed CSS styling\r\n       *\r\n       * @property active\r\n       * @type boolean\r\n       * @default false\r\n       * @public\r\n       */\r\n      //active: false,\r\n\r\n      /**\r\n       * Property for block level buttons\r\n       *\r\n       * See the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)\r\n       * @property block\r\n       * @type boolean\r\n       * @default false\r\n       * @public\r\n       */\r\n      //block: false,\r\n\r\n      /**\r\n       * If toggle property is true, clicking the button will toggle the active state\r\n       *\r\n       * @property toggle\r\n       * @type boolean\r\n       * @default false\r\n       * @public\r\n       */\r\n      //toggle: false,\r\n\r\n      /**\r\n       * If button is active and this is set, the icon property will match this property\r\n       *\r\n       * @property iconActive\r\n       * @type String\r\n       * @public\r\n       */\r\n      //iconActive: null,\r\n\r\n      /**\r\n       * If button is inactive and this is set, the icon property will match this property\r\n       *\r\n       * @property iconInactive\r\n       * @type String\r\n       * @public\r\n       */\r\n      //iconInactive: null,\r\n\r\n      /**\r\n       * Class(es) (e.g. glyphicons or font awesome) to use as a button icon\r\n       * This will render a <i class=\"{{icon}}\"></i> element in front of the button's label\r\n       *\r\n       * @property icon\r\n       * @type String\r\n       * @readonly\r\n       * @protected\r\n       */\r\n      icon: Ember['default'].computed('active', function() {\r\n          if (this.get('active')) {\r\n              return this.get('iconActive');\r\n          } else {\r\n              return this.get('iconInactive');\r\n          }\r\n      }),\r\n\r\n      contentDismiss: Ember['default'].computed.alias('content.dismiss'),\r\n\r\n      /**\r\n       * Supply a value that will be associated with this button. This will be send\r\n       * as a parameter of the default action triggered when clicking the button\r\n       *\r\n       * @property value\r\n       * @type any\r\n       * @public\r\n       */\r\n      //value: null,\r\n\r\n      /**\r\n       * State of the button. The button's label (if not used as a block component) will be set to the\r\n       * `<state>Text` property.\r\n       * This property will automatically be set when using a click action that supplies the callback with an promise\r\n       *\r\n       * @property textState\r\n       * @type String\r\n       * @default 'default'\r\n       * @protected\r\n       */\r\n      //textState: 'default',\r\n\r\n      /**\r\n       * Set this to true to reset the state. A typical use case is to bind this attribute with ember-data isDirty flag.\r\n       *\r\n       * @property reset\r\n       * @type boolean\r\n       * @public\r\n       */\r\n      //reset: null,\r\n\r\n      /**\r\n       * This will reset the state property to 'default', and with that the button's label to defaultText\r\n       *\r\n       * @method resetState\r\n       * @protected\r\n       */\r\n      resetState: function() {\r\n          this.set('textState', 'default');\r\n      },\r\n\r\n      resetObserver: Ember['default'].observer('reset', function(){\r\n          if(this.get('reset')){\r\n              this.resetState();\r\n          }\r\n      }),\r\n\r\n      text: Ember['default'].computed('textState', 'defaultText', 'pendingText', 'resolvedText', 'rejectedText', function() {\r\n          return this.getWithDefault(this.get('textState') + 'Text', this.get('defaultText'));\r\n      }),\r\n\r\n      /**\r\n       * Click handler. This will send the default \"action\" action, with the following parameters:\r\n       * * value of the button (that is the value of the \"value\" property)\r\n       * * original event object of the click event\r\n       * * callback: call that with a promise object, and the buttons state will automatically set to \"pending\", \"resolved\" and/or \"rejected\"\r\n       *\r\n       * @method click\r\n       * @protected\r\n       * @param evt\r\n       */\r\n      click: function(evt) {\r\n          if (this.get('toggle')) {\r\n              this.toggleProperty('active');\r\n          }\r\n          var that = this;\r\n          var callback = function(promise, disablePending) {\r\n              if (Ember['default'].isNone(disablePending)) {\r\n                disablePending = false;\r\n              }\r\n              if (promise) {\r\n                  that.set('textState', 'pending');\r\n                  if (disablePending) {\r\n                    that.set('disabled', true);\r\n                  }\r\n                  promise.then(\r\n                      function(){\r\n                          if (!that.get('isDestroyed')) {\r\n                            if (Ember['default'].isPresent(that.get('resolvedText'))) {\r\n                              that.set('textState', 'resolved');\r\n                            }\r\n                            else {\r\n                              that.resetState();\r\n                            }\r\n                          }\r\n                      },\r\n                      function(){\r\n                          if (!that.get('isDestroyed')) {\r\n                            if (Ember['default'].isPresent(that.get('rejectedText'))) {\r\n                              that.set('textState', 'rejected');\r\n                            }\r\n                            else {\r\n                              that.resetState();\r\n                            }\r\n                          }\r\n\r\n                      }\r\n                  ).finally(function() {\r\n                      if (disablePending) {\r\n                        that.set('disabled', false);\r\n                      }\r\n\r\n                    });\r\n              }\r\n          };\r\n          this.sendAction('action', this.get('value'), evt, callback);\r\n      }\r\n\r\n\r\n  });\n\n});","define('ember-bootstrap-components/components/bs-component', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Component.extend({\r\n\t});\n\n});","define('ember-bootstrap-components/components/bs-dropdown-button', ['exports', 'ember-bootstrap-components/components/bs-button', 'ember-bootstrap-components/mixins/dropdown-toggle'], function (exports, Button, DropdownToggle) {\n\n\t'use strict';\n\n\texports['default'] = Button['default'].extend(DropdownToggle['default']);\n\n});","define('ember-bootstrap-components/components/bs-dropdown-menu', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\r\n\r\n        /**\r\n         * Defaults to a `<ul>` tag. Change for other types of dropdown menus.\r\n         *\r\n         * @property tagName\r\n         * @type string\r\n         * @default ul\r\n         * @public\r\n         */\r\n        tagName: 'ul',\r\n        classNames: ['dropdown-menu'],\r\n        classNameBindings: ['alignClass'],\r\n\r\n        /**\r\n         * @property ariaRole\r\n         * @default menu\r\n         * @type string\r\n         * @protected\r\n         */\r\n        ariaRole: 'menu',\r\n\r\n        /**\r\n         * Alignment of the menu, either \"left\" or \"right\"\r\n         *\r\n         * @property align\r\n         * @type string\r\n         * @default left\r\n         * @public\r\n         */\r\n        align: 'left',\r\n\r\n        alignClass: Ember['default'].computed('align', function() {\r\n            if (this.get('align') !== 'left') {\r\n                return 'dropdown-menu-' + this.get('align');\r\n            }\r\n        })\r\n\r\n\r\n    });\n\n});","define('ember-bootstrap-components/components/bs-dropdown-toggle', ['exports', 'ember', 'ember-bootstrap-components/mixins/dropdown-toggle'], function (exports, Ember, DropdownToggle) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend(DropdownToggle['default'], {\r\n        /**\r\n         * Defaults to a `<a>` tag. Change for other types of dropdown toggles.\r\n         *\r\n         * @property tagName\r\n         * @type string\r\n         * @default a\r\n         * @public\r\n         */\r\n        tagName: 'a',\r\n\r\n        attributeBindings: ['href'],\r\n\r\n        /**\r\n         * Computed property to generate a `href=\"#\"` attribute when `tagName` is \"a\".\r\n         *\r\n         * @property href\r\n         * @type string\r\n         * @readonly\r\n         * @protected\r\n         */\r\n        href: Ember['default'].computed('tagName', function(){\r\n            if (this.get('tagName').toUpperCase() === 'A') {\r\n                return '#';\r\n            }\r\n        }),\r\n\r\n\r\n        click: function (e) {\r\n            e.preventDefault();\r\n            this.sendAction();\r\n        }\r\n\r\n\r\n    });\n\n});","define('ember-bootstrap-components/components/bs-dropdown', ['exports', 'ember', 'ember-bootstrap-components/components/bs-dropdown-button'], function (exports, Ember, toggleButton) {\n\n   'use strict';\n\n   exports['default'] = Ember['default'].Component.extend({\r\n       classNameBindings: ['open', 'containerClass'],\r\n\r\n       /**\r\n        * This property reflects the state of the dropdown, whether it is open or closed.\r\n        *\r\n        * @property open\r\n        * @default false\r\n        * @type boolean\r\n        * @public\r\n        */\r\n       open: false,\r\n\r\n       /**\r\n        * By default clicking on an open dropdown menu will close it. Set this property to false for the menu to stay open.\r\n        *\r\n        * @property closeOnMenuClick\r\n        * @default true\r\n        * @type boolean\r\n        * @public\r\n        */\r\n       closeOnMenuClick: true,\r\n\r\n       /**\r\n        * jQuery click event name, namespaced to this component's instance to prevent interference between multiple dropdowns.\r\n        *\r\n        * @property clickEventName\r\n        * @type string\r\n        * @private\r\n        */\r\n       clickEventName: undefined,\r\n\r\n       /**\r\n        * A computed property to generate the suiting class for the dropdown container, either \"dropdown\" or \"btn-group\".\r\n        *\r\n        * @property containerClass\r\n        * @type string\r\n        * @readonly\r\n        * @protected\r\n        */\r\n       containerClass: Ember['default'].computed('toggleType', function(){\r\n           return this.get('toggleType') === 'button' ? 'btn-group' : 'dropdown';\r\n       }),\r\n\r\n       /**\r\n        * This property is \"button\" if the toggle element is an instance of {{#crossLink \"Components.DropdownButton\"}}{{/crossLink}}, otherwise \"toggle\".\r\n        *\r\n        * @property toggleType\r\n        * @type string\r\n        * @readonly\r\n        * @protected\r\n        */\r\n       toggleType: Ember['default'].computed('childViews.@each', function() {\r\n           if (this.get('childViews').any(function(view) {\r\n               return view instanceof toggleButton['default'];\r\n           })) {\r\n               return 'button';\r\n           }\r\n           return 'toggle';\r\n       }),\r\n\r\n       actions: {\r\n           toggleDropdown: function () {\r\n               this.toggleProperty('open');\r\n           },\r\n\r\n           openDropdown: function () {\r\n               this.set('open', true);\r\n           },\r\n\r\n           closeDropdown: function () {\r\n               this.set('open', false);\r\n           }\r\n       },\r\n\r\n       handleClickEvents: Ember['default'].observer('open', function() {\r\n           if (this.get('open')) {\r\n               Ember['default'].$(document).on(this.clickEventName, Ember['default'].run.bind(this, this.closeOnClickHandler));\r\n           }\r\n           else {\r\n               Ember['default'].$(document).off(this.clickEventName);\r\n           }\r\n       }),\r\n\r\n       willDestroyElement: function(){\r\n           Ember['default'].$(document).off(this.clickEventName);\r\n       },\r\n\r\n       init: function() {\r\n           this._super();\r\n           // click event name that is namespaced to our component instance, so multiple dropdowns do not interfere\r\n           // with each other\r\n           this.clickEventName = 'click.' + this.get('elementId');\r\n       },\r\n\r\n       /**\r\n        * Handler for click events to close the dropdown\r\n        *\r\n        * @method closeOnClickHandler\r\n        * @param e\r\n        * @protected\r\n        */\r\n       closeOnClickHandler: function(e) {\r\n           var $target = Ember['default'].$(e.target);\r\n           if(!this.get('isDestroyed') &&\r\n               $target.closest(this.$().find('.dropdown-toggle')).length === 0 &&\r\n               ($target.closest(this.$().find('.dropdown-menu')).length === 0 || this.get('closeOnMenuClick'))) {\r\n               this.set('open', false);\r\n           }\r\n       }\r\n   });\n\n});","define('ember-bootstrap-components/components/bs-form-element', ['exports', 'ember', 'ember-bootstrap-components/components/bs-form-group', 'ember-bootstrap-components/components/bs-form', 'ember-bootstrap-components/mixins/i18n-support'], function (exports, Ember, FormGroup, Form, I18nSupport) {\n\n   'use strict';\n\n   var nonTextFieldControlTypes = Ember['default'].A([\r\n       'checkbox',\r\n       'select',\r\n       'select2',\r\n       'textarea'\r\n   ]);\r\n\r\n   /**\r\n    Sub class of `Components.FormGroup` that adds automatic form layout markup and form validation features.\r\n\r\n    ### Form layout\r\n\r\n    The appropriate Bootstrap markup for the given `formLayout` and `controlType` is automatically generated to easily\r\n    create forms without coding the default Bootstrap form markup by hand:\r\n\r\n    ```hbs\r\n    \\{{#bs-form formLayout=\"horizontal\" action=\"submit\"}}\r\n      \\{{bs-form-element controlType=\"email\" label=\"Email\" placeholder=\"Email\" value=email}}\r\n      \\{{bs-form-element controlType=\"password\" label=\"Password\" placeholder=\"Password\" value=password}}\r\n      \\{{bs-form-element controlType=\"checkbox\" label=\"Remember me\" value=rememberMe}}\r\n      \\{{bs-button defaultText=\"Submit\" type=\"primary\" buttonType=\"submit\"}}\r\n    \\{{/bs-form}}\r\n    ```\r\n\r\n    ### Form validation\r\n\r\n    In the following example the control elements of the three form elements value will be bound to the properties\r\n    (given by `property`) of the form's `model`, which in this case is its controller (see `model=this`):\r\n\r\n    ```hbs\r\n    \\{{#bs-form formLayout=\"horizontal\" model=this action=\"submit\"}}\r\n      \\{{bs-form-element controlType=\"email\" label=\"Email\" placeholder=\"Email\" property=\"email\"}}\r\n      \\{{bs-form-element controlType=\"password\" label=\"Password\" placeholder=\"Password\" property=\"password\"}}\r\n      \\{{bs-form-element controlType=\"checkbox\" label=\"Remember me\" property=\"rememberMe\"}}\r\n      \\{{bs-button defaultText=\"Submit\" type=\"primary\" buttonType=\"submit\"}}\r\n    \\{{/bs-form}}\r\n    ```\r\n\r\n    By using this indirection in comparison to directly binding the `value` property, you get the benefit of automatic\r\n    form validation, given that your `model` is implementing [ember-validations](https://github.com/dockyard/ember-validations).\r\n\r\n    In the example above the `model` was our controller itself, so the control elements were bound to the appropriate\r\n    properties of our controller. A controller implementing validations on those properties could look like this:\r\n\r\n    ```js\r\n    import Ember from 'ember';\r\n    import EmberValidations from 'ember-validations';\r\n\r\n    export default Ember.Controller.extend(EmberValidations.Mixin,{\r\n      email: null,\r\n      password: null,\r\n      rememberMe: false,\r\n      validations: {\r\n        email: {\r\n          presence: true,\r\n          format: {\r\n            with: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/\r\n          }\r\n        },\r\n        password: {\r\n          presence: true,\r\n          length: { minimum: 6, maximum: 10}\r\n        },\r\n        comments: {\r\n          length: { minimum: 5, maximum: 20}\r\n        }\r\n      }\r\n    });\r\n    ```\r\n\r\n    If the `showValidation` property is `true` (which is automatically the case if a `focusOut` event is captured from the\r\n    control element or the containing `Components.Form` was submitted with its `model` failing validation) and there are\r\n    validation errors for the `model`'s `property`, the appropriate Bootstrap validation markup (see\r\n    http://getbootstrap.com/css/#forms-control-validation) is applied:\r\n\r\n    * `validation` is set to 'error', which will set the `has-error` CSS class\r\n    * the `errorIcon` feedback icon is displayed if `controlType` is a text field\r\n    * the validation messages are displayed as Bootstrap `help-block`s\r\n\r\n    As soon as the validation is successful again...\r\n\r\n    * `validation` is set to 'success', which will set the `has-success` CSS class\r\n    * the `successIcon` feedback icon is displayed if `controlType` is a text field\r\n    * the validation messages are removed\r\n\r\n    ### I18n support\r\n\r\n    Supports translateable properties if [ember-i18n](https://github.com/jamesarosen/ember-i18n) is present.\r\n    See {{#crossLink \"Mixins.I18nSupport\"}}{{/crossLink}}\r\n\r\n\r\n    @class FormElement\r\n    @namespace Components\r\n    @extends Components.FormGroup\r\n    @uses Mixins.I18nSupport\r\n    */\r\n   exports['default'] = FormGroup['default'].extend(I18nSupport['default'], {\r\n       /**\r\n        * Text to display within a `<label>` tag.\r\n        *\r\n        * @property label\r\n        * @type string\r\n        * @public\r\n        */\r\n       label: null,\r\n\r\n       /**\r\n        * The type of the control widget.\r\n        * Supported types:\r\n        *\r\n        * * 'text'\r\n        * * 'checkbox'\r\n        * * 'select'\r\n        * * 'select2' (needs [ember-select-2](https://github.com/iStefo/ember-select-2))\r\n        * * 'textarea'\r\n        * * any other type will use an input tag with the `controlType` value as the type attribute (for e.g. HTML5 input\r\n        * types like 'email'), and the same layout as the 'text' type\r\n        *\r\n        * @property controlType\r\n        * @type string\r\n        * @public\r\n        */\r\n       controlType: 'text',\r\n\r\n       /**\r\n        * The value of the control element is bound to this property. You can bind it to some controller property to\r\n        * get/set the control element's value:\r\n        *\r\n        * ```hbs\r\n        * {{bs-form-element controlType=\"email\" label=\"Email\" placeholder=\"Email\" value=email}}\r\n        * ```\r\n        *\r\n        * Note: you loose the ability to validate this form element by directly binding to its value. It is recommended\r\n        * to use the `property` feature instead.\r\n        *\r\n        *\r\n        * @property value\r\n        * @public\r\n        */\r\n       value: null,\r\n\r\n       /**\r\n        The property name of the form element's `model` (by default the `model` of its parent `Components.Form`) that this\r\n        form element should represent. The control element's value will automatically be bound to the model property's\r\n        value.\r\n\r\n        Using this property enables form validation on this element.\r\n\r\n        @property property\r\n        @type string\r\n        @public\r\n        */\r\n       property: null,\r\n\r\n       /**\r\n        * Control element's HTML5 placeholder attribute\r\n        *\r\n        * @property placeholder\r\n        * @type string\r\n        * @public\r\n        */\r\n       placeholder: null,\r\n\r\n       /**\r\n        * Control element's name attribute\r\n        *\r\n        * @property name\r\n        * @type string\r\n        * @public\r\n        */\r\n       name: null,\r\n\r\n       /**\r\n        * An array of objects containing the selection of choices for multiple choice style form controls, e.g. select\r\n        * boxes.\r\n        *\r\n        * ```hbs\r\n        * {{bs-form-element controlType=\"select\" choices=countries choiceLabelProperty=\"name\" choiceValueProperty=\"id\" label=\"Country\" value=selectedCountry}}\r\n        * ```\r\n        *\r\n        * Be sure to also set the `choiceValueProperty` and `choiceLabelProperty` properties.\r\n        *\r\n        * @property choices\r\n        * @type array\r\n        * @public\r\n        */\r\n       choices: Ember['default'].A(),\r\n\r\n       /**\r\n        * The property of the `choices` array of objects, containing the value of the choice, e.g. the select box option.\r\n        *\r\n        * @property choiceValueProperty\r\n        * @type string\r\n        * @public\r\n        */\r\n       choiceValueProperty: null,\r\n\r\n       /**\r\n        * The property of the `choices` array of objects, containing the label of the choice, e.g. the select box option.\r\n        *\r\n        * @property choiceLabelProperty\r\n        * @type string\r\n        * @public\r\n        */\r\n       choiceLabelProperty: null,\r\n\r\n       /**\r\n        * Textarea's rows attribute (ignored for other `controlType`s)\r\n        *\r\n        * @property rows\r\n        * @type integer\r\n        * @default 5\r\n        * @public\r\n        */\r\n       rows: 5,\r\n\r\n       /**\r\n        * Textarea's cols attribute (ignored for other `controlType`s)\r\n        *\r\n        * @property cols\r\n        * @type integer\r\n        * @public\r\n        */\r\n       cols: null,\r\n\r\n       /**\r\n        * `choiceValueProperty` prefixed with 'content.' for 'select' `controlType`\r\n        *\r\n        * @property selectValueProperty\r\n        * @type string\r\n        * @readonly\r\n        * @private\r\n        */\r\n       selectValueProperty: Ember['default'].computed('choiceValueProperty', function(){\r\n           var valuePath = this.get('choiceValueProperty');\r\n           if (Ember['default'].isPresent(valuePath)) {\r\n               return valuePath.match(/^content\\..*/) ? valuePath : 'content.' + valuePath;\r\n           }\r\n       }),\r\n\r\n       /**\r\n        * `choiceLabelProperty` prefixed with 'content.' for 'select' `controlType`\r\n        *\r\n        * @property selectLabelProperty\r\n        * @type string\r\n        * @readonly\r\n        * @private\r\n        */\r\n       selectLabelProperty: Ember['default'].computed('choiceLabelProperty', function(){\r\n           var labelPath = this.get('choiceLabelProperty');\r\n           if (Ember['default'].isPresent(labelPath)) {\r\n               return labelPath.match(/^content\\..*/) ? labelPath : 'content.' + labelPath;\r\n           }\r\n       }),\r\n\r\n       /**\r\n        * The model used for validation. Defaults to the parent `Components.Form`'s `model`\r\n        *\r\n        * @property model\r\n        * @public\r\n        */\r\n       model: Ember['default'].computed.alias('form.model'),\r\n\r\n       /**\r\n        * The array of error messages from the `model`'s validation.\r\n        *\r\n        * @property errors\r\n        * @type array\r\n        * @protected\r\n        */\r\n       errors: null,\r\n\r\n       /**\r\n        * @property hasErrors\r\n        * @type boolean\r\n        * @readonly\r\n        * @protected\r\n        */\r\n       hasErrors: Ember['default'].computed.gt('errors.length',0),\r\n\r\n       /**\r\n        * @property hasValidator\r\n        * @type boolean\r\n        * @readonly\r\n        * @protected\r\n        */\r\n       hasValidator: Ember['default'].computed.notEmpty('model.validate'),\r\n\r\n       /**\r\n        * If `true` form validation markup is rendered (requires a validatable `model`).\r\n        *\r\n        * @property showValidation\r\n        * @type boolean\r\n        * @default false\r\n        * @public\r\n        */\r\n       showValidation: false,\r\n\r\n       /**\r\n        * @property showErrors\r\n        * @type boolean\r\n        * @readonly\r\n        * @protected\r\n        */\r\n       showErrors: Ember['default'].computed.and('showValidation','hasErrors'),\r\n\r\n       /**\r\n        * The validation (\"error\" or \"success\") or null if no validation is to be shown. Automatically computed from the\r\n        * models validation state.\r\n        *\r\n        * @property validation\r\n        * @readonly\r\n        * @type string\r\n        * @protected\r\n        */\r\n       validation: Ember['default'].computed('hasErrors','hasValidator','showValidation',function(){\r\n           if (!this.get('showValidation') || !this.get('hasValidator')) {\r\n               return null;\r\n           }\r\n           return this.get('hasErrors') ? 'error' : 'success';\r\n       }),\r\n\r\n       /**\r\n        * @property hasLabel\r\n        * @type boolean\r\n        * @readonly\r\n        * @protected\r\n        */\r\n       hasLabel: Ember['default'].computed.notEmpty('label'),\r\n\r\n       /**\r\n        * True for text field `controlType`s\r\n        *\r\n        * @property useIcons\r\n        * @type boolean\r\n        * @readonly\r\n        * @public\r\n        */\r\n       useIcons: Ember['default'].computed('controlType', function() {\r\n           return !nonTextFieldControlTypes.contains(this.get('controlType'));\r\n       }),\r\n\r\n       /**\r\n        * The form layout used for the markup generation (see http://getbootstrap.com/css/#forms):\r\n        *\r\n        * * 'horizontal'\r\n        * * 'vertical'\r\n        * * 'inline'\r\n        *\r\n        * Defaults to the parent `form`'s `formLayout` property.\r\n        *\r\n        * @property formLayout\r\n        * @type string\r\n        * @public\r\n        */\r\n       formLayout: Ember['default'].computed.alias('form.formLayout'),\r\n\r\n       /**\r\n        * @property isVertical\r\n        * @type boolean\r\n        * @readonly\r\n        * @protected\r\n        */\r\n       isVertical: Ember['default'].computed.equal('formLayout','vertical'),\r\n\r\n       /**\r\n        * @property isHorizontal\r\n        * @type boolean\r\n        * @readonly\r\n        * @protected\r\n        */\r\n       isHorizontal: Ember['default'].computed.equal('formLayout','horizontal'),\r\n\r\n       /**\r\n        * @property isInline\r\n        * @type boolean\r\n        * @readonly\r\n        * @protected\r\n        */\r\n       isInline: Ember['default'].computed.equal('formLayout','inline'),\r\n\r\n       /**\r\n        * The Bootstrap grid class for form labels within a horizontal layout form. Defaults to the value of the same\r\n        * property of the parent form. The corresponding grid class for form controls is automatically computed.\r\n        *\r\n        * @property horizontalLabelGridClass\r\n        * @type string\r\n        * @default 'col-md-4'\r\n        * @public\r\n        */\r\n       horizontalLabelGridClass: Ember['default'].computed.oneWay('form.horizontalLabelGridClass'),\r\n\r\n       /**\r\n        * Computed property that specifies the Bootstrap grid class for form controls within a horizontal layout form.\r\n        *\r\n        * @property horizontalInputGridClass\r\n        * @type string\r\n        * @readonly\r\n        * @protected\r\n        */\r\n       horizontalInputGridClass: Ember['default'].computed('horizontalLabelGridClass', function() {\r\n           var parts = this.get('horizontalLabelGridClass').split('-');\r\n           Ember['default'].assert('horizontalInputGridClass must match format bootstrap grid column class', parts.length===3);\r\n           parts[2] = 12 - parts[2];\r\n           return parts.join('-');\r\n       }),\r\n\r\n       /**\r\n        * Computed property that specifies the Bootstrap offset grid class for form controls within a horizontal layout\r\n        * form, that have no label.\r\n        *\r\n        * @property horizontalInputOffsetGridClass\r\n        * @type string\r\n        * @readonly\r\n        * @protected\r\n        */\r\n       horizontalInputOffsetGridClass: Ember['default'].computed('horizontalLabelGridClass', function() {\r\n           var parts = this.get('horizontalLabelGridClass').split('-');\r\n           parts.splice(2,0,'offset');\r\n           return parts.join('-');\r\n       }),\r\n\r\n       /**\r\n        * Reference to the parent `Components.Form` class.\r\n        *\r\n        * @property form\r\n        * @protected\r\n        */\r\n       form: Ember['default'].computed(function(){\r\n           return this.nearestOfType(Form['default']);\r\n       }),\r\n\r\n       layoutName: Ember['default'].computed('formLayout','controlType',function() {\r\n           var formLayout = this.getWithDefault('formLayout','vertical'),\r\n               inputLayout,\r\n               controlType = this.get('controlType');\r\n\r\n           switch (true) {\r\n               case nonTextFieldControlTypes.contains(controlType):\r\n                   inputLayout = controlType;\r\n                   break;\r\n               default:\r\n                   inputLayout = 'default';\r\n           }\r\n\r\n           return 'components/form-element/' + formLayout + '/' + inputLayout;\r\n       }),\r\n\r\n       _rerender: Ember['default'].observer('layoutName', function() {\r\n           this.rerender();\r\n       }),\r\n\r\n       /**\r\n        * Listen for focusOut events from the control element to automatically set `showValidation` to true to enable\r\n        * form validation markup rendering.\r\n        *\r\n        * @event focusOut\r\n        */\r\n       focusOut: function() {\r\n           this.set('showValidation', true);\r\n       },\r\n\r\n       init: function() {\r\n           this._super();\r\n           if (!Ember['default'].isBlank(this.get('property'))) {\r\n               Ember['default'].Binding.from(\"model.\" + this.get('property')).to('value').connect(this);\r\n               Ember['default'].Binding.from(\"model.errors.\" + this.get('property')).to('errors').connect(this);\r\n           }\r\n       }\r\n   });\n\n});","define('ember-bootstrap-components/components/bs-form-group', ['exports', 'ember', 'ember-bootstrap-components/config'], function (exports, Ember, Config) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Component.extend({\r\n\r\n        classNames: ['form-group'],\r\n        classNameBindings: ['validationClass','hasFeedback'],\r\n\r\n        /**\r\n         * Whether to show validation state icons.\r\n         * See http://getbootstrap.com/css/#forms-control-validation\r\n         *\r\n         * @property useIcons\r\n         * @type boolean\r\n         * @default true\r\n         * @public\r\n         */\r\n        useIcons: true,\r\n\r\n        /**\r\n         * Computed property which is true if the form group is in a validation state\r\n         *\r\n         * @property hasValidation\r\n         * @type boolean\r\n         * @public\r\n         * @readonly\r\n         */\r\n        hasValidation: Ember['default'].computed.notEmpty('validation'),\r\n\r\n        /**\r\n         * Computed property which is true if the form group is showing a validation icon\r\n         *\r\n         * @property hasFeedback\r\n         * @type boolean\r\n         * @public\r\n         * @readonly\r\n         */\r\n        hasFeedback: Ember['default'].computed.and('hasValidation','useIcons','hasIconForValidationState'),\r\n\r\n        /**\r\n         * The icon classes to be used for a feedback icon in a \"success\" validation state.\r\n         * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is\r\n         * rendered if `useIcons` is false.\r\n         *\r\n         * You can change this globally by setting the `formValidationSuccessIcon` property of\r\n         * the ember-bootstrap configuration in your config/environment.js file. If your are\r\n         * using FontAwesome for example:\r\n         *\r\n         * ```js\r\n         * ENV['ember-bootstrap'] = {\r\n         *   formValidationSuccessIcon: 'fa fa-check'\r\n         * }\r\n         * ```\r\n         *\r\n         * @property successIcon\r\n         * @type string\r\n         * @default 'glyphicon glyphicon-ok'\r\n         * @public\r\n         */\r\n        successIcon: Config['default'].formValidationSuccessIcon,\r\n\r\n        /**\r\n         * The icon classes to be used for a feedback icon in a \"error\" validation state.\r\n         * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is\r\n         * rendered if `useIcons` is false.\r\n         *\r\n         * You can change this globally by setting the `formValidationErrorIcon` property of\r\n         * the ember-bootstrap configuration in your config/environment.js file. If your are\r\n         * using FontAwesome for example:\r\n         *\r\n         * ```js\r\n         * ENV['ember-bootstrap'] = {\r\n         *   formValidationErrorIcon: 'fa fa-times'\r\n         * }\r\n         * ```\r\n         *\r\n         * @property errorIcon\r\n         * @type string\r\n         * @public\r\n         */\r\n        errorIcon: Config['default'].formValidationErrorIcon,\r\n\r\n        /**\r\n         * The icon classes to be used for a feedback icon in a \"warning\" validation state.\r\n         * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is\r\n         * rendered if `useIcons` is false.\r\n         *\r\n         * You can change this globally by setting the `formValidationWarningIcon` property of\r\n         * the ember-bootstrap configuration in your config/environment.js file. If your are\r\n         * using FontAwesome for example:\r\n         *\r\n         * ```js\r\n         * ENV['ember-bootstrap'] = {\r\n         *   formValidationWarningIcon: 'fa fa-warning'\r\n         * }\r\n         * ```\r\n         *\r\n         * @property warningIcon\r\n         * @type string\r\n         * @public\r\n         */\r\n        warningIcon: Config['default'].formValidationWarningIcon,\r\n\r\n        /**\r\n         * The icon classes to be used for a feedback icon in a \"info\" validation state.\r\n         * Defaults to the usual glyphicon classes. This is ignored, and no feedback icon is\r\n         * rendered if `useIcons` is false.\r\n         *\r\n         * You can change this globally by setting the `formValidationInfoIcon` property of\r\n         * the ember-bootstrap configuration in your config/environment.js file. If your are\r\n         * using FontAwesome for example:\r\n         *\r\n         * ```js\r\n         * ENV['ember-bootstrap'] = {\r\n         *   formValidationInfoIcon: 'fa fa-info-circle\r\n         * }\r\n         * ```\r\n         *\r\n         * The \"info\" validation state is not supported in Bootstrap CSS, but can be easily added\r\n         * using the following LESS style:\r\n         * ```less\r\n         * .has-info {\r\n         *   .form-control-validation(@state-info-text; @state-info-text; @state-info-bg);\r\n         * }\r\n         * ```\r\n         *\r\n         * @property infoIcon\r\n         * @type string\r\n         * @public\r\n         */\r\n        infoIcon: Config['default'].formValidationInfoIcon,\r\n\r\n        iconName: Ember['default'].computed('validation', function() {\r\n            var validation = this.get('validation') || 'success';\r\n            return this.get(validation + 'Icon');\r\n        }),\r\n\r\n        hasIconForValidationState: Ember['default'].computed.notEmpty('iconName'),\r\n\r\n        /**\r\n         * Set to a validation state to render the form-group with a validation style.\r\n         * See http://getbootstrap.com/css/#forms-control-validation\r\n         *\r\n         * The default states of \"success\", \"warning\" and \"error\" are supported by Bootstrap out-of-the-box.\r\n         * But you can use custom states as well. This will set a has-<state> class, and (if `useIcons`is true)\r\n         * a feedback whose class is taken from the <state>Icon property\r\n         *\r\n         * @property validation\r\n         * @type string\r\n         * @public\r\n         */\r\n        validation: null,\r\n\r\n        validationClass: Ember['default'].computed('validation', function() {\r\n            var validation = this.get('validation');\r\n            if (!Ember['default'].isBlank(validation)) {\r\n                return 'has-' + this.get('validation');\r\n            }\r\n        })\r\n    });\n\n});","define('ember-bootstrap-components/components/bs-form', ['exports', 'ember', 'ember-bootstrap-components/components/bs-form-element'], function (exports, Ember, FormElement) {\n\n   'use strict';\n\n   exports['default'] = Ember['default'].Component.extend({\r\n       tagName: 'form',\r\n       classNameBindings: ['layoutClass'],\r\n       ariaRole: 'form',\r\n\r\n       /**\r\n        * Bootstrap form class name (computed)\r\n        *\r\n        * @property layoutClass\r\n        * @type string\r\n        * @readonly\r\n        * @protected\r\n        *\r\n        */\r\n       layoutClass: Ember['default'].computed('formLayout', function() {\r\n           var layout = this.get('formLayout');\r\n           return layout === 'vertical' ? 'form' : 'form-' + layout;\r\n       }),\r\n\r\n       /**\r\n        * Set a model that this form should represent. This serves several purposes:\r\n        *\r\n        * * child `Components.FormElement`s can access and bind to this model by their `property`\r\n        * * when the model supports validation by using the [ember-validations](https://github.com/dockyard/ember-validations) mixin,\r\n        * child `Components.FormElement`s will look at the validation information of their `property` and render their form group accordingly.\r\n        * Moreover the form's `submit` event handler will validate the model and deny submitting if the model is not validated successfully.\r\n        *\r\n        * @property model\r\n        * @type Ember.Object\r\n        * @public\r\n        */\r\n       model: null,\r\n\r\n       /**\r\n        * Set the layout of the form to either \"vertical\", \"horizontal\" or \"inline\". See http://getbootstrap.com/css/#forms-inline and http://getbootstrap.com/css/#forms-horizontal\r\n        *\r\n        * @property formLayout\r\n        * @type string\r\n        * @public\r\n        */\r\n       formLayout: 'vertical',\r\n\r\n       /**\r\n        * Check if the `model` has a validate method, i.e. supports validation by using [ember-validations](https://github.com/dockyard/ember-validations)\r\n        *\r\n        * @property hasValidator\r\n        * @type boolean\r\n        * @readonly\r\n        * @protected\r\n        */\r\n       hasValidator: Ember['default'].computed.notEmpty('model.validate'),\r\n\r\n       /**\r\n        * The Bootstrap grid class for form labels. This is used by the `Components.FormElement` class as a default for the\r\n        * whole form.\r\n        *\r\n        * @property horizontalLabelGridClass\r\n        * @type string\r\n        * @default 'col-md-4'\r\n        * @public\r\n        */\r\n       horizontalLabelGridClass: 'col-md-4',\r\n\r\n\r\n       /**\r\n        * If set to true pressing enter will submit the form, even if no submit button is present\r\n        *\r\n        * @property submitOnEnter\r\n        * @type boolean\r\n        * @default false\r\n        * @public\r\n        */\r\n       submitOnEnter: false,\r\n\r\n       /**\r\n        * An array of `Components.FormElement`s that are children of this form.\r\n        *\r\n        * @property childFormElements\r\n        * @type Array\r\n        * @readonly\r\n        * @protected\r\n        */\r\n       childFormElements: Ember['default'].computed.filter('childViews', function(view) {\r\n           return view instanceof FormElement['default'];\r\n       }),\r\n\r\n       /**\r\n        * Submit handler that will send the default action (\"action\") to the controller when submitting the form.\r\n        *\r\n        * If there is a supplied `model` that supports validation (`hasValidator`) the model will be validated before, and\r\n        * only if validation is successful the default action will be sent. Otherwise an \"invalid\" action will be sent, and\r\n        * all the `showValidation` property of all child `Components.FormElement`s will be set to true, so error state and\r\n        * messages will be shown automatically.\r\n        *\r\n        * @event submit\r\n        */\r\n       submit: function(e) {\r\n           var that = this;\r\n           if (e) {\r\n               e.preventDefault();\r\n           }\r\n           if (!this.get('hasValidator')) {\r\n               return this.sendAction();\r\n           } else {\r\n               return this\r\n                   .get('model')\r\n                   .validate()\r\n                   .then(function() {\r\n                       if (that.get('model.isValid')) {\r\n                           return that.sendAction();\r\n                       }\r\n                   })\r\n                   .catch(function(){\r\n                       that.get('childFormElements').setEach('showValidation', true);\r\n                       return that.sendAction('invalid');\r\n                   });\r\n           }\r\n       },\r\n\r\n       keyPress: function(e) {\r\n           var code = e.keyCode || e.which;\r\n           if(code === 13 && this.get('submitOnEnter')) {\r\n               this.$().submit();\r\n           }\r\n       }\r\n   });\n\n});","define('ember-bootstrap-components/components/bs-input', ['exports', 'ember', 'ember-bootstrap-components/mixins/i18n-support'], function (exports, Ember, I18nSupport) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].TextField.extend(I18nSupport['default'], {\r\n        classNames: ['form-control']\r\n    });\n\n});","define('ember-bootstrap-components/components/bs-modal', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(Ember['default'].Evented, {\r\n      // Bootstrap Modal Manager Service\r\n      bootstrapModalManager: Ember['default'].inject.service(),\r\n    \r\n      classNames: ['modal'],\r\n      classNameBindings: ['fade', 'isVis:in', 'vertical:modal-dialog-center', 'class'],\r\n      attributeBindings: ['role', 'aria-labelledby', 'isAriaHidden:aria-hidden', \"ariaLabelledBy:aria-labelledby\"],\r\n      isAriaHidden: (function() {\r\n        return \"\" + (this.get('isVisible'));\r\n      }).property('isVisible'),\r\n      dialogStyle: (function() {\r\n        Ember['default'].run.scheduleOnce('afterRender', this, function() {\r\n          if (this.$()) {\r\n            return this.$().find('.modal-dialog').css('z-index', this.get('zindex'));\r\n          }\r\n        });\r\n      }).observes('zindex'),\r\n      dialogVerticalStyle: (function() {\r\n        if (this.get('vertical')) {\r\n          Ember['default'].run.scheduleOnce('afterRender', this, function() {\r\n            var marginHeight;\r\n            if (this.$()) {\r\n              marginHeight = this.$('.modal-dialog').height() / 2;\r\n              return this.$().find('.modal-dialog').css('margin-top', '-' + marginHeight + 'px');\r\n            }\r\n          });\r\n        }\r\n      }).observes('vertical').on('didInsertElement'),\r\n      backdropStyle: (function() {\r\n        return (\"z-index: \" + (this.get('zindex') - 2) + \";\").htmlSafe();\r\n      }).property('zindex'),\r\n      modalBackdrop: '<div class=\"modal-backdrop fade in\"></div>',\r\n      role: 'dialog',\r\n      footerViews: [],\r\n      backdrop: true,\r\n      title: null,\r\n      isVisible: false,\r\n      manual: false,\r\n      isVis: false,\r\n      fullSizeButtons: false,\r\n      fade: true,\r\n      vertical: false,\r\n      zindex: 1000,\r\n      keyClose: true,\r\n      didInsertElement: function() {\r\n        var name;\r\n        this._super();\r\n        this.setupBinders();\r\n        name = this.get('name');\r\n        Ember['default'].assert(\"Modal name is required for modal view \" + (this.get('elementId')), this.get('name'));\r\n        if (name == null) {\r\n          name = this.get('elementId');\r\n        }\r\n        this.get('bootstrapModalManager').add(name, this);\r\n        this.dialogStyle();\r\n        if (this.manual) {\r\n          return this.show();\r\n        }\r\n      },\r\n      becameVisible: function() {\r\n        return Ember['default'].$('body').addClass('modal-open');\r\n      },\r\n      becameHidden: function() {\r\n        return Ember['default'].$('body').removeClass('modal-open');\r\n      },\r\n      appendBackdrop: function() {\r\n        var parentElement;\r\n        parentElement = this.$().parent();\r\n        return this._backdrop = Ember['default'].$(this.modalBackdrop).appendTo(parentElement);\r\n      },\r\n      show: function() {\r\n        this.set('isVisible', true);\r\n        Ember['default'].run.later(this, (function() {\r\n          this.set('isVis', true);\r\n        }), 15);\r\n      },\r\n      hide: function() {\r\n        if (this.get('isDestroyed') || this.get('isDestroying')) {\r\n          return;\r\n        }\r\n        this.set('isVis', false);\r\n        if (this.get('fade')) {\r\n          Ember['default'].run.later(this, (function() {\r\n            if (this.get('isDestroyed') || this.get('isDestroying')) {\r\n              return;\r\n            }\r\n            this.set('isVisible', false);\r\n          }), 300);\r\n        } else {\r\n          this.set('isVisible', false);\r\n        }\r\n        return false;\r\n      },\r\n      toggle: function() {\r\n        return this.toggleProperty('isVisible');\r\n      },\r\n      click: function(event) {\r\n        var target, targetDismiss;\r\n        target = $(event.target);\r\n        targetDismiss = target.attr(\"data-dismiss\");\r\n        if (targetDismiss === 'modal') {\r\n          // If it's the header close icon\r\n          if (target.hasClass('close') && target.parent().hasClass('modal-header')) {\r\n            // If a button is marked as close we should call it to make sure the close action is made\r\n            var cancelButton = this.get('footerButtons').findBy('cancel', true);\r\n            if (Ember['default'].isPresent(cancelButton)) {\r\n              this.get('targetObject').send(cancelButton.get('action'))\r\n            }\r\n          }\r\n          return this.close();\r\n        }\r\n      },\r\n      keyPressed: function(event) {\r\n        if (event.keyCode === 27 && this.get('keyClose') && this.get('zindex') === this.get('bootstrapModalManager').get('zindex')) {\r\n          // If a button is marked as close we should call it to make sure the close action is made\r\n          var cancelButton = this.get('footerButtons').findBy('cancel', true);\r\n          if (Ember['default'].isPresent(cancelButton)) {\r\n            this.get('targetObject').send(cancelButton.get('action'))\r\n          }\r\n          return this.close(event);\r\n        }\r\n      },\r\n      close: function(event) {\r\n        if (this.get('isDestroyed') || this.get('isDestroying')) {\r\n          return;\r\n        }\r\n        this.set('isVis', false);\r\n        if (this.get('fade')) {\r\n          return Ember['default'].run.later(this, (function() {\r\n            if (this.get('isDestroyed') || this.get('isDestroying')) {\r\n              return;\r\n            }\r\n            if (this.get('manual')) {\r\n              this.destroy();\r\n            } else {\r\n              this.set('isVisible', false);\r\n            }\r\n            this.trigger('closed', this);\r\n          }), 300);\r\n        } else {\r\n          if (this.get('manual')) {\r\n            this.destroy();\r\n          } else {\r\n            this.set('isVisible', false);\r\n          }\r\n          return this.trigger('closed', this);\r\n        }\r\n      },\r\n      willDestroyElement: function() {\r\n        var name;\r\n        Ember['default'].$('body').removeClass('modal-open');\r\n        this.removeHandlers();\r\n        name = this.get('name');\r\n        if (name == null) {\r\n          name = this.get('elementId');\r\n        }\r\n        this.get('bootstrapModalManager').remove(name, this);\r\n        if (this._backdrop) {\r\n          return this._backdrop.remove();\r\n        }\r\n      },\r\n      removeHandlers: function() {\r\n        return $(window.document).unbind(\"keyup\", this._keyUpHandler);\r\n      },\r\n      setupBinders: function() {\r\n        var handler,\r\n          _this = this;\r\n        handler = function(event) {\r\n          return _this.keyPressed(event);\r\n        };\r\n        $(window.document).bind(\"keyup\", handler);\r\n        return this._keyUpHandler = handler;\r\n      }\r\n    });\n\n});","define('ember-bootstrap-components/components/bs-select', ['exports', 'ember', 'ember-bootstrap-components/mixins/i18n-support'], function (exports, Ember, I18nSupport) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Select.extend(I18nSupport['default'], {\r\n        classNames: ['form-control']\r\n    });\n\n});","define('ember-bootstrap-components/components/bs-textarea', ['exports', 'ember', 'ember-bootstrap-components/mixins/i18n-support'], function (exports, Ember, I18nSupport) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].TextArea.extend(I18nSupport['default'], {\r\n        classNames: ['form-control']\r\n    });\n\n});","define('ember-bootstrap-components/config', ['exports'], function (exports) {\n\n    'use strict';\n\n    var Config = {\r\n        formValidationSuccessIcon: 'glyphicon glyphicon-ok',\r\n        formValidationErrorIcon: 'glyphicon glyphicon-remove',\r\n        formValidationWarningIcon: 'glyphicon glyphicon-warning-sign',\r\n        formValidationInfoIcon: 'glyphicon glyphicon-info-sign',\r\n\r\n        load: function(config) {\r\n            for (var property in this) {\r\n                if (this.hasOwnProperty(property) && typeof this[property] !== 'function' && typeof config[property] !== 'undefined') {\r\n                    this[property] = config[property];\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    exports['default'] = Config;\n\n});","define('ember-bootstrap-components/mixins/dropdown-toggle', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\r\n        classNames: ['dropdown-toggle'],\r\n        attributeBindings: ['data-toggle'],\r\n        /**\r\n         * @property ariaRole\r\n         * @default button\r\n         * @type string\r\n         * @protected\r\n         */\r\n        ariaRole: 'button',\r\n\r\n        'data-toggle': 'dropdown',\r\n\r\n        targetObject: Ember['default'].computed.alias('parentView'),\r\n\r\n        /**\r\n         * The default action is set to \"toggleDropdown\" on the parent {{#crossLink \"Components.Dropdown\"}}{{/crossLink}}\r\n         *\r\n         * @property action\r\n         * @default toggleDropdown\r\n         * @type string\r\n         * @protected\r\n         */\r\n        action: 'toggleDropdown'\r\n    });\n\n});","define('ember-bootstrap-components/mixins/i18n-support', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var Mixin;\r\n\r\n    switch (true) {\r\n        case Ember['default'].isPresent(Ember['default'].I18n):\r\n            Mixin = Ember['default'].I18n.TranslateableProperties;\r\n            break;\r\n        default:\r\n            Mixin = Ember['default'].Mixin.create();\r\n    }\r\n\r\n    exports['default'] = Mixin;\n\n});","define('ember-bootstrap-components/mixins/size-class', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\r\n        /**\r\n         * Prefix for the size class, e.g. \"btn\" for button size classes (\"btn-lg\", \"btn-sm\" etc.)\r\n         *\r\n         * @property classTypePrefix\r\n         * @type string\r\n         * @required\r\n         * @protected\r\n         */\r\n        classTypePrefix: null,\r\n        classNameBindings: ['sizeClass'],\r\n        sizeClass: Ember['default'].computed('size', function() {\r\n            var prefix = this.get('classTypePrefix'),\r\n                size = this.get('size');\r\n            return Ember['default'].isBlank(size) ? null : prefix + '-' + size;\r\n        }),\r\n\r\n        /**\r\n         * Property for size styling, set to 'lg', 'sm' or 'xs'\r\n         *\r\n         * Also see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-sizes)\r\n         *\r\n         * @property size\r\n         * @type String\r\n         * @public\r\n         */\r\n        //size: null\r\n    });\n\n});","define('ember-bootstrap-components/mixins/type-class', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Mixin.create({\r\n        /**\r\n         * Prefix for the type class, e.g. \"btn\" for button type classes (\"btn-primary2 etc.)\r\n         *\r\n         * @property classTypePrefix\r\n         * @type string\r\n         * @required\r\n         * @protected\r\n         */\r\n        classTypePrefix: null,\r\n        classNameBindings: ['typeClass'],\r\n        typeClass: Ember['default'].computed('type', function() {\r\n            var prefix = this.get('classTypePrefix'),\r\n                type = this.get('type') || 'default';\r\n            return prefix + '-' + type;\r\n        }),\r\n\r\n\r\n        /**\r\n         * Property for type styling\r\n         *\r\n         * For the available types see the [Bootstrap docs](http://getbootstrap.com/css/#buttons-options) (use without \"btn-\" prefix)\r\n         *\r\n         * @property type\r\n         * @type String\r\n         * @default 'default'\r\n         * @public\r\n         */\r\n        //type: 'default'\r\n    });\n\n});","define('ember-bootstrap-components/services/bootstrap-modal-manager', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Service.extend(Ember['default'].Evented, {\r\n    allModals: Ember['default'].A(),\r\n    modalVisible: false,\r\n    observeModalVisibillity: Ember['default'].observer('allModals.@each.isVisible', 'allModals.[]', function() {\r\n      this.set('modalVisible', this.get('allModals').isAny('isVisible', true));\r\n    }),\r\n    add: function(name, modalInstance) {\r\n      var zindex;\r\n      var _this = this;\r\n      zindex = this.get('zindex');\r\n      this.set('zindex', zindex + 2);\r\n      modalInstance.set('zindex', zindex + 2);\r\n      modalInstance.on('closed', function(e) {\r\n        zindex = e.get('zindex');\r\n        if (zindex === _this.get('zindex')) {\r\n          _this.set('zindex', zindex - 2);\r\n        }\r\n        return _this.trigger('closed', e);\r\n      });\r\n      this.get('allModals').pushObject(modalInstance);\r\n      return this.set(name, modalInstance);\r\n    },\r\n    register: function(name, modalInstance) {\r\n      this.add(name, modalInstance);\r\n      return modalInstance.appendTo(modalInstance.get('targetObject').namespace.rootElement);\r\n    },\r\n    remove: function(name) {\r\n      var allModals = this.get('allModals');\r\n      allModals.removeObject(this.get(name));\r\n      return this.set(name, null);\r\n    },\r\n    close: function(name) {\r\n      return this.get(name).close();\r\n    },\r\n    hide: function(name) {\r\n      return this.get(name).hide();\r\n    },\r\n    show: function(name) {\r\n      return this.get(name).show();\r\n    },\r\n    toggle: function(name) {\r\n      return this.get(name).toggle();\r\n    },\r\n    confirm: function(controller, title, message, options, confirmButtonTitle, confirmButtonEvent, confirmButtonType, cancelButtonTitle, cancelButtonEvent, cancelButtonType) {\r\n      var body, buttons;\r\n      if (confirmButtonTitle == null) {\r\n        confirmButtonTitle = \"Confirm\";\r\n      }\r\n      if (confirmButtonEvent == null) {\r\n        confirmButtonEvent = \"modalConfirmed\";\r\n      }\r\n      if (confirmButtonType == null) {\r\n        confirmButtonType = null;\r\n      }\r\n      if (cancelButtonTitle == null) {\r\n        cancelButtonTitle = \"Cancel\";\r\n      }\r\n      if (cancelButtonEvent == null) {\r\n        cancelButtonEvent = \"modalCanceled\";\r\n      }\r\n      if (cancelButtonType == null) {\r\n        cancelButtonType = null;\r\n      }\r\n      body = Ember['default'].HTMLBars.compile(message || \"Are you sure you would like to perform this action?\");\r\n      buttons = [\r\n        Ember['default'].Object.create({\r\n          defaultText: confirmButtonTitle,\r\n          action: confirmButtonEvent,\r\n          type: confirmButtonType,\r\n          dismiss: 'modal'\r\n        }), Ember['default'].Object.create({\r\n          defaultText: cancelButtonTitle,\r\n          action: cancelButtonEvent,\r\n          type: cancelButtonType,\r\n          dismiss: 'modal'\r\n        })\r\n      ];\r\n      return this.open('confirm-modal', title || 'Confirmation required!', body, buttons, controller, options);\r\n    },\r\n    okModal: function(controller, title, message, options, okButtonTitle, okButtonEvent, okButtonType) {\r\n      var body, buttons;\r\n      if (okButtonTitle == null) {\r\n        okButtonTitle = \"OK\";\r\n      }\r\n      if (okButtonEvent == null) {\r\n        okButtonEvent = \"okModal\";\r\n      }\r\n      if (okButtonType == null) {\r\n        okButtonType = null;\r\n      }\r\n      body = Ember['default'].HTMLBars.compile(message || \"Are you sure you would like to perform this action?\");\r\n      buttons = [\r\n        Ember['default'].Object.create({\r\n          defaultText: okButtonTitle,\r\n          action: okButtonEvent,\r\n          type: okButtonType,\r\n          dismiss: 'modal'\r\n        })\r\n      ];\r\n      return this.open('ok-modal', title || 'Confirmation required!', body, buttons, controller, options);\r\n    },\r\n    openModal: function(modalView, options) {\r\n      var instance, rootElement;\r\n      if (options == null) {\r\n        options = {};\r\n      }\r\n      rootElement = options.rootElement || '.ember-application';\r\n      instance = modalView.create(options);\r\n      return instance.appendTo(rootElement);\r\n    },\r\n    openManual: function(name, title, content, footerButtons, controller, options) {\r\n      var view;\r\n      view = Ember['default'].HTMLBars.compile(content || \"Are you sure you would like to perform this action?\");\r\n      return this.open(name, title, view, footerButtons, controller, options);\r\n    },\r\n    open: function(name, title, view, footerButtons, controller, options) {\r\n      var cl, modalComponent, rootElement, template;\r\n      cl = void 0;\r\n      modalComponent = void 0;\r\n      template = void 0;\r\n      if (options == null) {\r\n        options = {};\r\n      }\r\n      if (options.fade == null) {\r\n        options.fade = this.get(\"fade\");\r\n      }\r\n      if (options.fullSizeButtons == null) {\r\n        options.fullSizeButtons = this.get(\"fullSizeButtons\");\r\n      }\r\n      if (options.targetObject == null) {\r\n        options.targetObject = controller;\r\n      }\r\n      if (options.vertical == null) {\r\n        options.vertical = this.get(\"vertical\");\r\n      }\r\n\r\n      // If no controller\r\n      var controllerMode = true;\r\n      var container = null;\r\n      if (Ember['default'].isNone(controller)) {\r\n        controllerMode = false;\r\n        container = this.get('container');\r\n      }\r\n      else {\r\n        container = controller.get('container');\r\n      }\r\n\r\n      cl = container.lookup(\"component-lookup:main\");\r\n      modalComponent = cl.lookupFactory(\"bs-modal\", container).create();\r\n\r\n      modalComponent.setProperties({\r\n        name: name,\r\n        title: title,\r\n        manual: true,\r\n        footerButtons: footerButtons\r\n      });\r\n      modalComponent.setProperties(options);\r\n\r\n      if (Ember['default'].typeOf(view) === \"string\") {\r\n        template = container.lookup(\"template:\" + view);\r\n        Ember['default'].assert(\"Template \" + view + \" was specified for Modal but template could not be found.\", template);\r\n        if (template) {\r\n          modalComponent.setProperties({\r\n            body: Ember['default'].View.extend({\r\n              template: template,\r\n              controller: controller\r\n            })\r\n          });\r\n        }\r\n      } else if (Ember['default'].typeOf(view) === \"class\") {\r\n\r\n        modalComponent.setProperties({\r\n          compiledTemp: view.template,\r\n          body: view,\r\n          controller: controller\r\n        });\r\n      }\r\n      else if (Ember['default'].typeOf(view) === 'object') {\r\n        modalComponent.setProperties({\r\n          compiledTemp: view,\r\n          controller: controller\r\n        });\r\n      }\r\n\r\n      if (controllerMode) {\r\n        rootElement = controller.rootElement;\r\n        if (typeof controller.rootElement === \"undefined\" && Ember['default'].isPresent(controller.namespace)) {\r\n          rootElement = controller.namespace.rootElement;\r\n        }\r\n      }\r\n      else {\r\n        rootElement = \"body\";\r\n      }\r\n\r\n      return modalComponent.appendTo(rootElement);\r\n    },\r\n    fade: true,\r\n    fullSizeButtons: false,\r\n    vertical: false,\r\n    zindex: 1000\r\n  });\n\n});"],"names":[],"mappingsrxSA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvndjllLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClfile":"addons.js"}